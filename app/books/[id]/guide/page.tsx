"use client"

import { useState, useEffect } from "react"
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card"
import { Badge } from "@/components/ui/badge"
import { Button } from "@/components/ui/button"

import { 
  ArrowLeft, 
  User, 
  Calendar, 
  Building, 
  BookOpen, 
  Globe, 
  MessageSquare, 
  HelpCircle,
  Brain,
  Star,
  Clock,
  Award
} from "lucide-react"
import { supabase } from "@/lib/supabase"
import Image from "next/image"
import Link from "next/link"
import { notFound } from "next/navigation"
import { toast } from "sonner"

interface BookGuidePageProps {
  params: Promise<{ id: string }> | { id: string }
}

interface Book {
  id: number
  title: string
  author: string | null
  publisher: string | null
  year: number | null
  cover_url: string | null
  file_url: string | null
  description: string | null
  tags: string | null
}

interface AIAnalysis {
  summary: string
  key_points: string[]
  keywords: string[]
  topics: string[]
  difficulty: string
  mindmap_structure: any
}

async function getBook(id: string) {
  const { data: book, error } = await supabase.from("Booklist").select("*").eq("id", id).single()

  if (error || !book) {
    return null
  }

  // Generate signed URL for cover
  let coverUrl = book.cover_url
  if (coverUrl) {
    const { data: signedCover, error: coverError } = await supabase.storage
      .from("book-cover")
      .createSignedUrl(coverUrl.replace(/^book-cover\//, ""), 60 * 60 * 24)
    if (!coverError && signedCover?.signedUrl) {
      coverUrl = signedCover.signedUrl
    }
  }

  return { ...book, cover_url: coverUrl }
}

async function getAIAnalysis(bookId: string): Promise<AIAnalysis | null> {
  try {
    const { data, error } = await supabase
      .from('ai_book_analysis')
      .select('analysis_result')
      .eq('book_id', bookId)
      .single()

    if (error || !data) {
      return null
    }

    return data.analysis_result
  } catch (error) {
    console.error('Error fetching AI analysis:', error)
    return null
  }
}

export default function BookGuidePage({ params }: BookGuidePageProps) {
  const [resolvedParams, setResolvedParams] = useState<{ id: string } | null>(null)
  const [book, setBook] = useState<Book | null>(null)
  const [aiAnalysis, setAIAnalysis] = useState<AIAnalysis | null>(null)
  const [loading, setLoading] = useState(true)
  const [activeTab, setActiveTab] = useState<'overview' | 'analysis' | 'quiz'>('overview')

  // Sample quiz questions - in real app, these could be generated by AI
  const [quizQuestions] = useState([
    {
      question: "What is the main theme of this book?",
      options: ["Personal Development", "Historical Fiction", "Science Fiction", "Business Strategy"],
      correct: 0
    },
    {
      question: "Who would benefit most from reading this book?",
      options: ["Students", "Business Leaders", "General Readers", "Researchers"],
      correct: 2
    }
  ])
  const [currentQuestion, setCurrentQuestion] = useState(0)
  const [selectedAnswer, setSelectedAnswer] = useState<number | null>(null)
  const [showResult, setShowResult] = useState(false)
  const [score, setScore] = useState(0)

  // Resolve params
  useEffect(() => {
    const resolveParams = async () => {
      try {
        if (params && typeof params === 'object' && 'then' in params && typeof params.then === 'function') {
          const resolved = await params
          setResolvedParams(resolved)
        } else {
          setResolvedParams(params as unknown as { id: string })
        }
      } catch (error) {
        console.error('Error resolving params:', error)
        if (params && typeof params === 'object' && 'id' in params) {
          setResolvedParams({ id: (params as any).id })
        }
      }
    }
    resolveParams()
  }, [params])

  useEffect(() => {
    if (resolvedParams) {
      initializePage()
    }
  }, [resolvedParams])

  const initializePage = async () => {
    if (!resolvedParams) return
    
    const bookData = await getBook(resolvedParams.id)
    if (!bookData) {
      notFound()
      return
    }

    setBook(bookData)
    
    // Try to get AI analysis
    const analysis = await getAIAnalysis(resolvedParams.id)
    setAIAnalysis(analysis)
    
    setLoading(false)
  }

  // Fallback content when AI analysis is not available
  const getFallbackContent = () => {
    const isChineseBook = book?.title && /[\u4e00-\u9fff]/.test(book.title)
    
    if (isChineseBook) {
      return {
        summary: book?.description || "这是一本优秀的图书，内容丰富，值得深入阅读和学习。本书通过系统性的论述和实用的案例，为读者提供了宝贵的知识和见解。作者凭借深厚的专业背景和丰富的经验，将复杂的概念以通俗易懂的方式呈现，使读者能够更好地理解和应用书中的知识。",
        keyPoints: [
          "系统性地介绍了核心概念和理论框架",
          "提供了实用的方法论和操作指南",
          "结合实际案例，增强理解和应用",
          "适合不同层次的读者学习和参考",
          "为相关领域的发展提供了新的思路",
          "具有很强的实用价值和指导意义"
        ],
        keywords: ["核心理念", "实践应用", "系统思维", "方法论", "案例分析", "专业知识"],
        topics: ["理论基础", "实践方法", "案例研究", "应用指南"],
        worldRelevance: "在当今快速发展的社会中，本书所探讨的主题具有重要的现实意义。它不仅帮助读者理解当前的发展趋势，还为应对未来挑战提供了有价值的参考。书中的理念和方法在现代社会中有着广泛的应用前景。",
        authorBackground: book?.author ? `${book.author}是该领域的知名专家，具有丰富的理论研究和实践经验。其深厚的学术背景和专业素养为本书的权威性和实用性提供了保障。` : "作者在相关领域具有深厚的专业背景和丰富的实践经验。"
      }
    } else {
      return {
        summary: book?.description || "This is an excellent book that offers valuable insights and knowledge for readers. Through systematic discussion and practical examples, the book provides readers with comprehensive understanding of the subject matter. The author's deep expertise and rich experience make complex concepts accessible and applicable for readers at different levels.",
        keyPoints: [
          "Provides systematic introduction to core concepts and frameworks",
          "Offers practical methodologies and operational guidelines", 
          "Includes real-world case studies for better understanding",
          "Suitable for readers at different levels of expertise",
          "Presents new perspectives for field development",
          "Delivers strong practical value and guidance"
        ],
        keywords: ["Core concepts", "Practical application", "Systematic thinking", "Methodology", "Case analysis", "Professional knowledge"],
        topics: ["Theoretical foundation", "Practical methods", "Case studies", "Implementation guide"],
        worldRelevance: "In today's rapidly evolving world, the themes explored in this book hold significant contemporary relevance. It not only helps readers understand current trends but also provides valuable references for addressing future challenges. The concepts and methods presented have broad application prospects in modern society.",
        authorBackground: book?.author ? `${book.author} is a recognized expert in the field with extensive theoretical research and practical experience. Their deep academic background and professional expertise ensure the authority and practicality of this work.` : "The author brings deep professional background and rich practical experience to the subject matter."
      }
    }
  }

  const handleQuizAnswer = (answerIndex: number) => {
    setSelectedAnswer(answerIndex)
  }

  const submitAnswer = () => {
    if (selectedAnswer === null) return

    if (selectedAnswer === quizQuestions[currentQuestion].correct) {
      setScore(score + 1)
      toast.success("Correct!")
    } else {
      toast.error("Incorrect. Try again!")
    }

    if (currentQuestion < quizQuestions.length - 1) {
      setCurrentQuestion(currentQuestion + 1)
      setSelectedAnswer(null)
    } else {
      setShowResult(true)
    }
  }

  const resetQuiz = () => {
    setCurrentQuestion(0)
    setSelectedAnswer(null)
    setShowResult(false)
    setScore(0)
  }

  if (loading) {
    return (
      <div className="container mx-auto px-4 py-8 max-w-6xl">
        <div className="flex items-center justify-center min-h-[400px]">
          <div className="text-center">
            <div className="animate-spin rounded-full h-8 w-8 border-b-2 border-primary mx-auto mb-4"></div>
            <p className="text-muted-foreground">Loading reading guide...</p>
          </div>
        </div>
      </div>
    )
  }

  if (!book) {
    notFound()
  }

  const content = aiAnalysis || getFallbackContent()

  return (
    <div className="container mx-auto px-4 py-8 max-w-6xl">
      {/* Header */}
      <div className="mb-6">
        <Link href={`/books/${book.id}`}>
          <Button variant="ghost" size="sm" className="mb-4">
            <ArrowLeft className="w-4 h-4 mr-2" />
            Back to Book Details
          </Button>
        </Link>
        
        <div className="flex items-center gap-6 mb-6">
          <div className="flex-shrink-0">
            <div className="w-24 h-32 relative bg-muted rounded-md overflow-hidden">
              <Image
                src={book.cover_url || "/placeholder.svg"}
                alt={book.title}
                fill
                className="object-cover"
              />
            </div>
          </div>
          <div className="flex-1">
            <h1 className="text-3xl font-bold mb-2">{book.title}</h1>
            <div className="flex items-center gap-4 text-muted-foreground">
              {book.author && (
                <div className="flex items-center gap-1">
                  <User className="w-4 h-4" />
                  <span>{book.author}</span>
                </div>
              )}
              {book.year && (
                <div className="flex items-center gap-1">
                  <Calendar className="w-4 h-4" />
                  <span>{book.year}</span>
                </div>
              )}
            </div>
          </div>
        </div>

        {/* Navigation Tabs */}
        <div className="flex gap-2 mb-6 border-b">
          <Button 
            variant={activeTab === 'overview' ? 'default' : 'ghost'}
            onClick={() => setActiveTab('overview')}
            className="rounded-b-none"
          >
            <BookOpen className="w-4 h-4 mr-2" />
            Overview
          </Button>
          <Button 
            variant={activeTab === 'analysis' ? 'default' : 'ghost'}
            onClick={() => setActiveTab('analysis')}
            className="rounded-b-none"
          >
            <Brain className="w-4 h-4 mr-2" />
            Deep Analysis
          </Button>
          <Button 
            variant={activeTab === 'quiz' ? 'default' : 'ghost'}
            onClick={() => setActiveTab('quiz')}
            className="rounded-b-none"
          >
            <HelpCircle className="w-4 h-4 mr-2" />
            Quick Quiz
          </Button>
        </div>
      </div>

      {/* Content */}
      {activeTab === 'overview' && (
        <div className="grid grid-cols-1 lg:grid-cols-2 gap-6">
          {/* Book Summary */}
          <Card>
            <CardHeader>
              <CardTitle className="flex items-center gap-2">
                <BookOpen className="w-5 h-5" />
                Book Summary
              </CardTitle>
            </CardHeader>
            <CardContent>
              <p className="text-muted-foreground leading-relaxed">{content.summary}</p>
            </CardContent>
          </Card>

          {/* Author Background */}
          <Card>
            <CardHeader>
              <CardTitle className="flex items-center gap-2">
                <User className="w-5 h-5" />
                Author Background
              </CardTitle>
            </CardHeader>
            <CardContent>
              <p className="text-muted-foreground leading-relaxed">{content.authorBackground}</p>
            </CardContent>
          </Card>

          {/* Key Points */}
          <Card>
            <CardHeader>
              <CardTitle className="flex items-center gap-2">
                <Star className="w-5 h-5" />
                Key Points
              </CardTitle>
            </CardHeader>
            <CardContent>
              <ul className="space-y-2">
                {content.keyPoints.map((point, index) => (
                  <li key={index} className="flex items-start gap-2">
                    <div className="w-2 h-2 bg-primary rounded-full mt-2 flex-shrink-0" />
                    <span className="text-muted-foreground">{point}</span>
                  </li>
                ))}
              </ul>
            </CardContent>
          </Card>

          {/* Relevance to Today's World */}
          <Card>
            <CardHeader>
              <CardTitle className="flex items-center gap-2">
                <Globe className="w-5 h-5" />
                Relevance to Today's World
              </CardTitle>
            </CardHeader>
            <CardContent>
              <p className="text-muted-foreground leading-relaxed">{content.worldRelevance}</p>
            </CardContent>
          </Card>
        </div>
      )}

      {activeTab === 'analysis' && (
        <div className="grid grid-cols-1 lg:grid-cols-2 gap-6">
          {/* Keywords */}
          <Card>
            <CardHeader>
              <CardTitle className="flex items-center gap-2">
                <Brain className="w-5 h-5" />
                Key Concepts
              </CardTitle>
            </CardHeader>
            <CardContent>
              <div className="flex flex-wrap gap-2">
                {content.keywords.map((keyword, index) => (
                  <Badge key={index} variant="secondary">{keyword}</Badge>
                ))}
              </div>
            </CardContent>
          </Card>

          {/* Topics */}
          <Card>
            <CardHeader>
              <CardTitle className="flex items-center gap-2">
                <MessageSquare className="w-5 h-5" />
                Main Topics
              </CardTitle>
            </CardHeader>
            <CardContent>
              <div className="space-y-2">
                {content.topics.map((topic, index) => (
                  <div key={index} className="p-2 bg-muted rounded-md">
                    <span className="font-medium">{topic}</span>
                  </div>
                ))}
              </div>
            </CardContent>
          </Card>

          {/* Difficulty Level */}
          {aiAnalysis?.difficulty && (
            <Card>
              <CardHeader>
                <CardTitle className="flex items-center gap-2">
                  <Award className="w-5 h-5" />
                  Difficulty Level
                </CardTitle>
              </CardHeader>
              <CardContent>
                <div className="flex items-center gap-2">
                  <Badge variant={
                    aiAnalysis.difficulty === 'Beginner' ? 'secondary' :
                    aiAnalysis.difficulty === 'Intermediate' ? 'default' : 'destructive'
                  }>
                    {aiAnalysis.difficulty}
                  </Badge>
                  <span className="text-muted-foreground">Reading Level</span>
                </div>
              </CardContent>
            </Card>
          )}

          {/* Talk to Book */}
          <Card>
            <CardHeader>
              <CardTitle className="flex items-center gap-2">
                <MessageSquare className="w-5 h-5" />
                Talk to Book
              </CardTitle>
            </CardHeader>
            <CardContent>
              <p className="text-muted-foreground mb-4">
                Have questions about this book? Start a conversation to explore its ideas further.
              </p>
              <Button className="w-full" disabled>
                <MessageSquare className="w-4 h-4 mr-2" />
                Coming Soon
              </Button>
            </CardContent>
          </Card>
        </div>
      )}

      {activeTab === 'quiz' && (
        <div className="max-w-2xl mx-auto">
          <Card>
            <CardHeader>
              <CardTitle className="flex items-center gap-2">
                <HelpCircle className="w-5 h-5" />
                Quick Quiz
              </CardTitle>
            </CardHeader>
            <CardContent>
              {!showResult ? (
                <div className="space-y-6">
                  <div className="flex items-center justify-between">
                    <span className="text-sm text-muted-foreground">
                      Question {currentQuestion + 1} of {quizQuestions.length}
                    </span>
                    <Badge variant="outline">Score: {score}</Badge>
                  </div>
                  
                  <h3 className="text-lg font-medium">
                    {quizQuestions[currentQuestion].question}
                  </h3>
                  
                  <div className="space-y-2">
                    {quizQuestions[currentQuestion].options.map((option, index) => (
                      <Button
                        key={index}
                        variant={selectedAnswer === index ? 'default' : 'outline'}
                        className="w-full justify-start"
                        onClick={() => handleQuizAnswer(index)}
                      >
                        {option}
                      </Button>
                    ))}
                  </div>
                  
                  <Button 
                    onClick={submitAnswer} 
                    disabled={selectedAnswer === null}
                    className="w-full"
                  >
                    {currentQuestion < quizQuestions.length - 1 ? 'Next Question' : 'Finish Quiz'}
                  </Button>
                </div>
              ) : (
                <div className="text-center space-y-4">
                  <div className="text-4xl">🎉</div>
                  <h3 className="text-xl font-medium">Quiz Complete!</h3>
                  <p className="text-muted-foreground">
                    You scored {score} out of {quizQuestions.length}
                  </p>
                  <Button onClick={resetQuiz} className="w-full">
                    Take Quiz Again
                  </Button>
                </div>
              )}
            </CardContent>
          </Card>
        </div>
      )}
    </div>
  )
}